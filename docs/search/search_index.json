{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gitlas : The minimalist Git Log Statistics library Meta Data of Git Often times we have a ton of Meta Data ,but we really don't have much of tools to make useful analysis from it. Git Logs are one of the best sources from which we can actually understand and analyse some of the trends in our Project workings. The commits and merges can be tracked easily with git , but to make useful charts and analysis we need to convert these data into a useful data type. gitlas is a simple Library that filters out gitlogs with regular expression pattern matching and applies useful analytic filters to get more out of the data. JSON data type is highly preferred and widely used, hence the library convert the git log into a simple JSON format which can be exported as well. These statistics can be useful or not really useful at all depending on the size of your project and the collaborators associated with it. Getting GitLog as text To get the git log in a text format git log > gitlog.txt or copy it to the clipboard and later paste it in a new file. git log > xclip Requirements Python 3 Installing gitlas using pip pip install gitlas or pip3 in some systems pip3 install gitlas Usage This library is designed to be used alongside data analysis and visualization libraries. additionaly you can also export git log data and or stat reports in JSON format.","title":"Home"},{"location":"#gitlas-the-minimalist-git-log-statistics-library","text":"","title":"gitlas : The minimalist Git Log Statistics library"},{"location":"#meta-data-of-git","text":"Often times we have a ton of Meta Data ,but we really don't have much of tools to make useful analysis from it. Git Logs are one of the best sources from which we can actually understand and analyse some of the trends in our Project workings. The commits and merges can be tracked easily with git , but to make useful charts and analysis we need to convert these data into a useful data type. gitlas is a simple Library that filters out gitlogs with regular expression pattern matching and applies useful analytic filters to get more out of the data. JSON data type is highly preferred and widely used, hence the library convert the git log into a simple JSON format which can be exported as well. These statistics can be useful or not really useful at all depending on the size of your project and the collaborators associated with it.","title":"Meta Data of Git"},{"location":"#getting-gitlog-as-text","text":"To get the git log in a text format git log > gitlog.txt or copy it to the clipboard and later paste it in a new file. git log > xclip","title":"Getting GitLog as text"},{"location":"#requirements","text":"Python 3","title":"Requirements"},{"location":"#installing-gitlas","text":"using pip pip install gitlas or pip3 in some systems pip3 install gitlas","title":"Installing gitlas"},{"location":"#usage","text":"This library is designed to be used alongside data analysis and visualization libraries. additionaly you can also export git log data and or stat reports in JSON format.","title":"Usage"},{"location":"Changelog/","text":"Changelog 0.2.4: Documentation Update. Fixed Links in package description. Adapted Code Style: Black 0.2.3: Method Renames, Cleaner Structure Official Documentation site Up First GitHub Release 0.1.3: Fixed Year Data Casting 0.1.2: Initial Package Deploy","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"developers/","text":"Contributions Reporting issues When reporting issues please include as much detail as possible about your operating system, gitlas version and python version. Whenever possible, please also include a brief, self-contained code example that demonstrates the problem. Contributing Code If you want to contribute by adding or extending the functionality of gitlas then you can issue a pull request. Do note that : 1. Code must be well commented. 2. The structure of code should remain consistent. 3. Docstrings are a must with every change.","title":"Contributions"},{"location":"developers/#contributions","text":"","title":"Contributions"},{"location":"developers/#reporting-issues","text":"When reporting issues please include as much detail as possible about your operating system, gitlas version and python version. Whenever possible, please also include a brief, self-contained code example that demonstrates the problem.","title":"Reporting issues"},{"location":"gitlas.core.commit/","text":"gitlas.core.Commit Class","title":"gitlas.core.Commit"},{"location":"gitlas.core.commit/#gitlascorecommit-class","text":"","title":"gitlas.core.Commit Class"},{"location":"gitlas.core.log/","text":"gitlas.core.Log Class","title":"gitlas.core.Log"},{"location":"gitlas.core.log/#gitlascorelog-class","text":"","title":"gitlas.core.Log Class"},{"location":"gitlas/","text":"gitlas.core Module This is the core module responsible for the inner workings of the gitlas package. gitlas does not have any external dependencies. Modules Imported gitlas makes use of python standard library and imports the following three libraries imports from python standard library json : For JSON export capabilities. re : For matching re patterns in the log files. datetime : For Conversion of date/time data. Class Descriptions in gitlas.core module 1. Class gitlas.core.Commit : The gitlas.core.Commit class is basically a barebones class which is used internally for storing properties of a single git commit which makes it easier to access and manage commit data. Base Methods in gitlas.core.Commit Method name 1. Constructor ( __init__ ) method 2. setattr ( __setattr__ ) method 3. getattr ( __getattr__ ) method 4. delattr ( __delattr__ ) method Properties stored in gitlas.core.Commit Property Name DataType 1. author [str] 2. authorEmail [str] 3. comment [str] 4. time [str] 5. date [str] 6. day [str] 7. year [str] 8. month [str] 9. timezone [str] 10. hashid [str] 11. isMerger [Boolean] More Properties can be added or changed on calling setattr() method All Properties except isMerger are stored as strings (The date time objects are converted from string later when they are required .) 2. Class gitlas.core.Log : gitlas.core.Log is the main class where the logfile is filtered ,Seperated as indivisual commits and stored as Commit objects. There are some utility statistics methods available as well. Base Methods in gitlas.core.Log Method name 1. Constructor ( __init__ ) method 2. setattr ( __setattr__ ) method 3. getattr ( __getattr__ ) method 4. delattr ( __delattr__ ) method 5. string ( __str__ ) method 6. representation ( __repr_ ) method StatInfo Methods in gitlas.core.Log Method name 1. mergeCounts() 2. commitCounts() 3. specificWeekDayStats() 4. activeDevelopmentDuration() 5. singleMonthStats() 6. yearStats() 7. authorStats() Properties stored in gitlas.core.Log Property Name DataType 1. commits [list] 2. filename [str] 3. type [str] using commit as first word in a comment message The Bug originates from the fact that re matches the word 'commit' and then stores the hash value associated to it however if the comment message also has commit word as first word gtilas may fail to recognize the commit and may cause trouble. Functions in gitlas.core module These are some functions available for working with git Log data and many of them are used internally within the package. Functions Available in gitlas.core Function Name Description 1. monthNumberSwap Generates the month number based on the shorhand name of the month. 2. datetimeConvertor Converts raw date/time data into an object of datetime class. 3. joinString This method joins a list of strings to a input string.returns a string object. 4. JSONEncoder Encodes Log/CommitObject Data into the JSON format. However do note that only Commit/Log objects are supported. 5. JSONExport Exports the Object data as an JSON file to save the object permanantely. 6. analyzeDataOverall Analyzes all data in different Parameters.","title":"Introduction"},{"location":"gitlas/#gitlascore-module","text":"This is the core module responsible for the inner workings of the gitlas package. gitlas does not have any external dependencies.","title":"gitlas.core Module"},{"location":"gitlas/#modules-imported","text":"gitlas makes use of python standard library and imports the following three libraries imports from python standard library json : For JSON export capabilities. re : For matching re patterns in the log files. datetime : For Conversion of date/time data.","title":"Modules Imported"},{"location":"gitlas/#class-descriptions-in-gitlascore-module","text":"","title":"Class Descriptions in gitlas.core module"},{"location":"gitlas/#functions-in-gitlascore-module","text":"These are some functions available for working with git Log data and many of them are used internally within the package. Functions Available in gitlas.core Function Name Description 1. monthNumberSwap Generates the month number based on the shorhand name of the month. 2. datetimeConvertor Converts raw date/time data into an object of datetime class. 3. joinString This method joins a list of strings to a input string.returns a string object. 4. JSONEncoder Encodes Log/CommitObject Data into the JSON format. However do note that only Commit/Log objects are supported. 5. JSONExport Exports the Object data as an JSON file to save the object permanantely. 6. analyzeDataOverall Analyzes all data in different Parameters.","title":"Functions in gitlas.core module"},{"location":"quicktutorial/","text":"A short gitlas Tutorial About gitlas : gitlas is a library aimed at analysts/developers who want to get more out of git logs. Currently these git logs have potential to potray more statistics. gitlas tries to make more out of the git log data and one of the simple ways is to convert the existing data in JSON objects which can be conviniently stored and utilized for data analysis and visualizations. Pre steps: get a copy of gitlog data in a text file using the command git log >gitlog.txt or use clip to copy the contents to cliboard git log > xclip Install gitlas and other libraries(if not installed or you intend to use) pip install gitlas Lets Begin a brief tutorial 1. import the essential libraries (note: gitlas is a standalone library) In: from gitlas import Log , JSONExport import matplotlib.pyplot as plt import pandas as pd 2. Create a Log Object with the filename and the file source type to initialize the constructor In: data = Log ( \"gitlog.txt\" , \"git\" ) total merge counts can be calculated using Log.mergeCounts() method In: data . mergeCounts () Out: 3 Total Commit counts can be calculated using Log.commitCounts() method In: data . commitCounts () Out: 26 To find the total duration of log use Log.activeDevelopmentDuration() method In: data . activeDevelopmentDuration () Out: '7 days, 12:30:36' 3. An overview of the statistics in a given year Generating yearly statistics using Log.yearStats() method This metric will return a dictionary of the stats In: data . yearStats ( 2020 ) Out: {'Commits': 26, 'Mergers': 3, 'ActiveMonths': ['Jun', 'May'], 'MonthlyCommitReports': {'Jun': 8, 'May': 18}, 'MonthlyMergerReports': {'Jun': 0, 'May': 3}} 4. Viewing day wise statistics and plotting it using Matplotlib daywise statistics work in a different manner and will can be used to obtain certain stats use Log.specificWeekDayStats() This kind of statistic can be useful for finding the day with most commits and merges for your project. In: data . specificWeekDayStats ( \"Sun\" ) #for a single day Out: {'Commits': 0, 'Mergers': 0} In: days = [ \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" , \"Sun\" ] In: day_wise_report = {} In: for i in days : day_wise_report [ i ] = data . specificWeekDayStats ( i ) In: day_wise_report # Report of all days in a week Out: {'Mon': {'Commits': 3, 'Mergers': 0}, 'Tue': {'Commits': 4, 'Mergers': 0}, 'Wed': {'Commits': 7, 'Mergers': 0}, 'Thu': {'Commits': 11, 'Mergers': 3}, 'Fri': {'Commits': 0, 'Mergers': 0}, 'Sat': {'Commits': 1, 'Mergers': 0}, 'Sun': {'Commits': 0, 'Mergers': 0}} In: dates = day_wise_report . keys () commitvals = [] mergevals = [] In: for i in days : commitvals . append ( day_wise_report [ i ][ \"Commits\" ]) mergevals . append ( day_wise_report [ i ][ \"Mergers\" ]) In: fig , ax = plt . subplots () #Plotting Bar Graphs ax . bar ( dates , commitvals ) ax . bar ( dates , mergevals ) Out: <BarContainer object of 7 artists> 5. Lets compare which Author Contributes the most and visualize a pie chart Author wise data is useful to see the stats of contributions from different contributors/Authors using Log.authorStats() In: author_wise_data = data . authorStats () author_report = {} names = [] commits = [] merges = [] explode = [ 0 , 0.25 ] for i in author_wise_data . values (): names . append ( i [ \"Name\" ]) commits . append ( i [ \"Commits\" ]) merges . append ( i [ \"Mergers\" ]) In: fig , bx = plt . subplots () bx . pie ( commits , explode = explode , labels = names , shadow = True , startangle = 90 ) Out: ([<matplotlib.patches.Wedge at 0x7f25985bafd0>, <matplotlib.patches.Wedge at 0x7f25985486d8>], [Text(-0.8233618545088074, -0.7294348884854751, 'Abhi-1U'), Text(1.0104895487153542, 0.8952155449594471, 'AbhishekUlayil')]) 6. Lets Look at the activities of May Month in a tabular format using pandas specific Month reports can be accessed by Log.singleMonthStats() This method will return few values of the specific month in the year provided In: MayData = data . singleMonthStats ( \"May\" , 2020 ) MayData Out: {'Commits': 18, 'Mergers': 3} In: pd . DataFrame ( MayData . values (), index = [ \"Commits\" , \"Merges\" ], columns = [ 'May' ]) Out: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } May Commits 18 Merges 3 7. Exporting Log files /Meta Data as JSON Format gitlas.JSONExport() is built for that In: JSONExport ( data , \"GitExport.json\" ) Out: Export Of Object Data Successfull!","title":"Quick Tutorial"},{"location":"quicktutorial/#a-short-gitlas-tutorial","text":"","title":"A short gitlas Tutorial"},{"location":"quicktutorial/#about-gitlas","text":"gitlas is a library aimed at analysts/developers who want to get more out of git logs. Currently these git logs have potential to potray more statistics. gitlas tries to make more out of the git log data and one of the simple ways is to convert the existing data in JSON objects which can be conviniently stored and utilized for data analysis and visualizations.","title":"About gitlas :"},{"location":"quicktutorial/#pre-steps","text":"get a copy of gitlog data in a text file using the command git log >gitlog.txt or use clip to copy the contents to cliboard git log > xclip Install gitlas and other libraries(if not installed or you intend to use) pip install gitlas","title":"Pre steps:"},{"location":"quicktutorial/#lets-begin-a-brief-tutorial","text":"","title":"Lets Begin a brief tutorial"},{"location":"quicktutorial/#3-an-overview-of-the-statistics-in-a-given-year","text":"","title":"3. An overview of the statistics in a given year"},{"location":"quicktutorial/#4-viewing-day-wise-statistics-and-plotting-it-using-matplotlib","text":"","title":"4. Viewing day wise statistics and plotting it using Matplotlib"},{"location":"quicktutorial/#5-lets-compare-which-author-contributes-the-most-and-visualize-a-pie-chart","text":"","title":"5. Lets compare which Author Contributes the most and visualize a pie chart"},{"location":"quicktutorial/#6-lets-look-at-the-activities-of-may-month-in-a-tabular-format-using-pandas","text":"","title":"6. Lets Look at the activities of May Month in a tabular format using pandas"},{"location":"quicktutorial/#7-exporting-log-files-meta-data-as-json-format","text":"","title":"7. Exporting Log files /Meta Data as JSON Format"},{"location":"quicktutorial/#gitlasjsonexport-is-built-for-that","text":"In: JSONExport ( data , \"GitExport.json\" ) Out: Export Of Object Data Successfull!","title":"gitlas.JSONExport() is built for that"}]}