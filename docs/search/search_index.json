{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitLas :The minimalist Git Log Statistics library Meta Data of Git Often times we have a ton of Meta Data ,but we really don't have much of tools to make useful analysis from it. Git Logs are one of the best sources from which we can actually understand and analyse some of the trends in our Project workings. The commits and merges can be tracked easily with git , but to make useful charts and analysis we need to convert these data into a useful data type. GitLas is a simple Library that filters out gitlogs with regular expression pattern matching and applies useful analytic filters to get more out of the data. JSON data type is highly preferred and widely used, hence the library convert the git log into a simple JSON format which can be exported as well. These statistics can be useful or not really useful at all depending on the size of your project and the collaborators associated with it. Getting GitLog as text To get the git log in a text format git log > gitlog.txt or copy it to the clipboard and later paste it in a new file. git log > clip Requirements Python 3 Installing gitlas using pip pip install gitlas or pip3 in some systems pip3 install gitlas Usage This library is designed to be used alongside data analysis and visualization libraries. additionaly you can also export git log data and or stat reports in JSON format","title":"Home"},{"location":"#gitlas-the-minimalist-git-log-statistics-library","text":"","title":"GitLas :The minimalist Git Log Statistics library"},{"location":"#meta-data-of-git","text":"Often times we have a ton of Meta Data ,but we really don't have much of tools to make useful analysis from it. Git Logs are one of the best sources from which we can actually understand and analyse some of the trends in our Project workings. The commits and merges can be tracked easily with git , but to make useful charts and analysis we need to convert these data into a useful data type. GitLas is a simple Library that filters out gitlogs with regular expression pattern matching and applies useful analytic filters to get more out of the data. JSON data type is highly preferred and widely used, hence the library convert the git log into a simple JSON format which can be exported as well. These statistics can be useful or not really useful at all depending on the size of your project and the collaborators associated with it.","title":"Meta Data of Git"},{"location":"#getting-gitlog-as-text","text":"To get the git log in a text format git log > gitlog.txt or copy it to the clipboard and later paste it in a new file. git log > clip","title":"Getting GitLog as text"},{"location":"#requirements","text":"Python 3","title":"Requirements"},{"location":"#installing-gitlas","text":"using pip pip install gitlas or pip3 in some systems pip3 install gitlas","title":"Installing gitlas"},{"location":"#usage","text":"This library is designed to be used alongside data analysis and visualization libraries. additionaly you can also export git log data and or stat reports in JSON format","title":"Usage"},{"location":"Changelog/","text":"Changelog 0.2.3: Method Renames, Cleaner Structure Official Documentation site Up 0.1.3: Fixed Year Data Casting 0.1.2: Initial Package Deploy","title":"Changelog"},{"location":"Changelog/#changelog","text":"","title":"Changelog"},{"location":"Changelog/#023","text":"Method Renames, Cleaner Structure Official Documentation site Up","title":"0.2.3:"},{"location":"Changelog/#013","text":"Fixed Year Data Casting","title":"0.1.3:"},{"location":"Changelog/#012","text":"Initial Package Deploy","title":"0.1.2:"},{"location":"gitlas/","text":"","title":"Gitlas"},{"location":"quicktutorial/","text":"A short gitlas Tutorial About gitlas : gitlas is a library aimed at analysts/developers who want to get more out of git logs. Currently these git logs have potential to potray more statistics. gitlas tries to make more out of the git log data and one of the simple ways is to convert the existing data in JSON objects which can be conviniently stored and utilized for data analysis and visualizations. Pre steps: get a copy of gitlog data in a text file using the command git log >gitlog.txt or use clip to copy the contents to cliboard git log > clip Install gitlas and other libraries(if not installed or you intend to use) pip install gitlas Lets Begin a brief tutorial 1. import the essential libraries (note: gitlas is a standalone library) In: from gitlas import Log , JSONExport import matplotlib.pyplot as plt import pandas as pd 2. Create a Log Object with the filename and the file source type to initialize the constructor In: data = Log ( \"gitlog.txt\" , \"git\" ) total merge counts can be calculated using Log.mergeCounts() method In: data . mergeCounts () Out: 3 Total Commit counts can be calculated using Log.commitCounts() method In: data . commitCounts () Out: 26 To find the total duration of log use Log.activeDevelopmentDuration() method In: data . activeDevelopmentDuration () Out: '7 days, 12:30:36' 3. An overview of the statistics in a given year Generating yearly statistics using Log.yearStats() method This metric will return a dictionary of the stats In: data . yearStats ( 2020 ) Out: {'Commits': 26, 'Mergers': 3, 'ActiveMonths': ['Jun', 'May'], 'MonthlyCommitReports': {'Jun': 8, 'May': 18}, 'MonthlyMergerReports': {'Jun': 0, 'May': 3}} 4. Viewing day wise statistics and plotting it using Matplotlib daywise statistics work in a different manner and will can be used to obtain certain stats use Log.specificWeekDayStats() This kind of statistic can be useful for finding the day with most commits and merges for your project. In: data . specificWeekDayStats ( \"Sun\" ) #for a single day Out: {'Commits': 0, 'Mergers': 0} In: days = [ \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" , \"Sun\" ] In: day_wise_report = {} In: for i in days : day_wise_report [ i ] = data . specificWeekDayStats ( i ) In: day_wise_report # Report of all days in a week Out: {'Mon': {'Commits': 3, 'Mergers': 0}, 'Tue': {'Commits': 4, 'Mergers': 0}, 'Wed': {'Commits': 7, 'Mergers': 0}, 'Thu': {'Commits': 11, 'Mergers': 3}, 'Fri': {'Commits': 0, 'Mergers': 0}, 'Sat': {'Commits': 1, 'Mergers': 0}, 'Sun': {'Commits': 0, 'Mergers': 0}} In: dates = day_wise_report . keys () commitvals = [] mergevals = [] In: for i in days : commitvals . append ( day_wise_report [ i ][ \"Commits\" ]) mergevals . append ( day_wise_report [ i ][ \"Mergers\" ]) In: fig , ax = plt . subplots () #Plotting Bar Graphs ax . bar ( dates , commitvals ) ax . bar ( dates , mergevals ) Out: <BarContainer object of 7 artists> 5. Lets compare which Author Contributes the most and visualize a pie chart Author wise data is useful to see the stats of contributions from different contributors/Authors using Log.authorStats() In: author_wise_data = data . authorStats () author_report = {} names = [] commits = [] merges = [] explode = [ 0 , 0.25 ] for i in author_wise_data . values (): names . append ( i [ \"Name\" ]) commits . append ( i [ \"Commits\" ]) merges . append ( i [ \"Mergers\" ]) In: fig , bx = plt . subplots () bx . pie ( commits , explode = explode , labels = names , shadow = True , startangle = 90 ) Out: ([<matplotlib.patches.Wedge at 0x7f25985bafd0>, <matplotlib.patches.Wedge at 0x7f25985486d8>], [Text(-0.8233618545088074, -0.7294348884854751, 'Abhi-1U'), Text(1.0104895487153542, 0.8952155449594471, 'AbhishekUlayil')]) 6. Lets Look at the activities of May Month in a tabular format using pandas specific Month reports can be accessed by Log.singleMonthStats() This method will return few values of the specific month in the year provided In: MayData = data . singleMonthStats ( \"May\" , 2020 ) MayData Out: {'Commits': 18, 'Mergers': 3} In: pd . DataFrame ( MayData . values (), index = [ \"Commits\" , \"Merges\" ], columns = [ 'May' ]) Out: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } May Commits 18 Merges 3 7. Exporting Log files /Meta Data as JSON Format gitlas.JSONExport() is built for that In: JSONExport ( data , \"GitExport.json\" ) Out: Export Of Object Data Successfull!","title":"Quick Tutorial"},{"location":"quicktutorial/#a-short-gitlas-tutorial","text":"","title":"A short gitlas Tutorial"},{"location":"quicktutorial/#about-gitlas","text":"gitlas is a library aimed at analysts/developers who want to get more out of git logs. Currently these git logs have potential to potray more statistics. gitlas tries to make more out of the git log data and one of the simple ways is to convert the existing data in JSON objects which can be conviniently stored and utilized for data analysis and visualizations.","title":"About gitlas :"},{"location":"quicktutorial/#pre-steps","text":"get a copy of gitlog data in a text file using the command git log >gitlog.txt or use clip to copy the contents to cliboard git log > clip Install gitlas and other libraries(if not installed or you intend to use) pip install gitlas","title":"Pre steps:"},{"location":"quicktutorial/#lets-begin-a-brief-tutorial","text":"","title":"Lets Begin a brief tutorial"},{"location":"quicktutorial/#1-import-the-essential-libraries-note-gitlas-is-a-standalone-library","text":"In: from gitlas import Log , JSONExport import matplotlib.pyplot as plt import pandas as pd","title":"1. import the essential libraries (note: gitlas is a standalone library)"},{"location":"quicktutorial/#2-create-a-log-object-with-the-filename-and-the-file-source-type-to-initialize-the-constructor","text":"In: data = Log ( \"gitlog.txt\" , \"git\" ) total merge counts can be calculated using Log.mergeCounts() method In: data . mergeCounts () Out: 3 Total Commit counts can be calculated using Log.commitCounts() method In: data . commitCounts () Out: 26","title":"2. Create a Log Object with the filename and the file source type to initialize the constructor"},{"location":"quicktutorial/#to-find-the-total-duration-of-log-use-logactivedevelopmentduration-method","text":"In: data . activeDevelopmentDuration () Out: '7 days, 12:30:36'","title":"To find the total duration of log use Log.activeDevelopmentDuration() method"},{"location":"quicktutorial/#3-an-overview-of-the-statistics-in-a-given-year","text":"","title":"3. An overview of the statistics in a given year"},{"location":"quicktutorial/#generating-yearly-statistics-using-logyearstats-method","text":"This metric will return a dictionary of the stats In: data . yearStats ( 2020 ) Out: {'Commits': 26, 'Mergers': 3, 'ActiveMonths': ['Jun', 'May'], 'MonthlyCommitReports': {'Jun': 8, 'May': 18}, 'MonthlyMergerReports': {'Jun': 0, 'May': 3}}","title":"Generating yearly statistics using Log.yearStats() method"},{"location":"quicktutorial/#4-viewing-day-wise-statistics-and-plotting-it-using-matplotlib","text":"","title":"4. Viewing day wise statistics and plotting it using Matplotlib"},{"location":"quicktutorial/#daywise-statistics-work-in-a-different-manner-and-will-can-be-used-to-obtain-certain-stats-use-logspecificweekdaystats","text":"This kind of statistic can be useful for finding the day with most commits and merges for your project. In: data . specificWeekDayStats ( \"Sun\" ) #for a single day Out: {'Commits': 0, 'Mergers': 0} In: days = [ \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" , \"Sun\" ] In: day_wise_report = {} In: for i in days : day_wise_report [ i ] = data . specificWeekDayStats ( i ) In: day_wise_report # Report of all days in a week Out: {'Mon': {'Commits': 3, 'Mergers': 0}, 'Tue': {'Commits': 4, 'Mergers': 0}, 'Wed': {'Commits': 7, 'Mergers': 0}, 'Thu': {'Commits': 11, 'Mergers': 3}, 'Fri': {'Commits': 0, 'Mergers': 0}, 'Sat': {'Commits': 1, 'Mergers': 0}, 'Sun': {'Commits': 0, 'Mergers': 0}} In: dates = day_wise_report . keys () commitvals = [] mergevals = [] In: for i in days : commitvals . append ( day_wise_report [ i ][ \"Commits\" ]) mergevals . append ( day_wise_report [ i ][ \"Mergers\" ]) In: fig , ax = plt . subplots () #Plotting Bar Graphs ax . bar ( dates , commitvals ) ax . bar ( dates , mergevals ) Out: <BarContainer object of 7 artists>","title":"daywise statistics work in a different manner and will can be used to obtain certain stats use Log.specificWeekDayStats()"},{"location":"quicktutorial/#5-lets-compare-which-author-contributes-the-most-and-visualize-a-pie-chart","text":"","title":"5. Lets compare which Author Contributes the most and visualize a pie chart"},{"location":"quicktutorial/#author-wise-data-is-useful-to-see-the-stats-of-contributions-from-different-contributorsauthors-using-logauthorstats","text":"In: author_wise_data = data . authorStats () author_report = {} names = [] commits = [] merges = [] explode = [ 0 , 0.25 ] for i in author_wise_data . values (): names . append ( i [ \"Name\" ]) commits . append ( i [ \"Commits\" ]) merges . append ( i [ \"Mergers\" ]) In: fig , bx = plt . subplots () bx . pie ( commits , explode = explode , labels = names , shadow = True , startangle = 90 ) Out: ([<matplotlib.patches.Wedge at 0x7f25985bafd0>, <matplotlib.patches.Wedge at 0x7f25985486d8>], [Text(-0.8233618545088074, -0.7294348884854751, 'Abhi-1U'), Text(1.0104895487153542, 0.8952155449594471, 'AbhishekUlayil')])","title":"Author wise data is useful to see the stats of contributions from different contributors/Authors using Log.authorStats()"},{"location":"quicktutorial/#6-lets-look-at-the-activities-of-may-month-in-a-tabular-format-using-pandas","text":"","title":"6. Lets Look at the activities of May Month in a tabular format using pandas"},{"location":"quicktutorial/#specific-month-reports-can-be-accessed-by-logsinglemonthstats","text":"This method will return few values of the specific month in the year provided In: MayData = data . singleMonthStats ( \"May\" , 2020 ) MayData Out: {'Commits': 18, 'Mergers': 3} In: pd . DataFrame ( MayData . values (), index = [ \"Commits\" , \"Merges\" ], columns = [ 'May' ]) Out: .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } May Commits 18 Merges 3","title":"specific Month reports can be accessed by Log.singleMonthStats()"},{"location":"quicktutorial/#7-exporting-log-files-meta-data-as-json-format","text":"","title":"7. Exporting Log files /Meta Data as JSON Format"},{"location":"quicktutorial/#gitlasjsonexport-is-built-for-that","text":"In: JSONExport ( data , \"GitExport.json\" ) Out: Export Of Object Data Successfull!","title":"gitlas.JSONExport() is built for that"}]}